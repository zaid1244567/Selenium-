class Nodes:
    def __init__(self,data):
        self.data=data
        self.ref=None

class LinkedList:
    def __init__(self):
        self.head=None

    def printLL(self):
        if self.head is None:
            print("linkedin list is empty")
        else:
            n=self.head
            while n is not None:
                print(n.data,"-->",end=" ")
                n=n.ref
    def add_begining(self,data):
        new_node = Nodes(data)
        new_node.ref = self.head
        self.head = new_node

    def add_at_end(self,data):
        new_node = Nodes(data)
        if self.head is None:
            self.head = new_node
        else:
            n=self.head
            while n.ref is not None:
                n=n.ref
            n.ref = new_node

    def add_after_node(self,data,x):
        n = self.head
        while n is not None:
            if n.data == x:
                break
            n=n.ref
        if n is None:
            print("node is not present")
        else:
            new_node=Nodes(data)
            new_node.ref=n.ref
            n.ref=new_node

    def add_before_first_node(self,data,x):
        if self.head is None:
            print("Linked list is empty")
            return
        if self.head.data == x:
            new_node = Nodes(data)
            new_node.ref = self.head
            self.head = new_node
            return

    def add_before_last_node(self,data,x):
        n=self.head
        while n.ref is not None:
            if n.ref.data==x:
                break
            n=n.ref
        if n.ref is None:
            print("Node is not present")
        else:
            new_node = Nodes(data)
            new_node.ref = n.ref
            n.ref = new_node

    def deleting_first_node(self):
        if self.head is None:
            print("Linked list is empty, deletion can't be performed")
        else:
            self.head=self.head.ref

    def deleting_last_node(self):
        if self.head is None:
            print("Linked list is empty, deletion can't be performed")
        else:
            n=self.head
            while n.ref.ref is not None:
                n=n.ref
            n.ref = None

    def deleting_any_node_by_value(self,x):
        if self.head is None:
            print("Linked list is empty, deletion can't be performed")
            return
        if self.head.data == x:
            self.head=self.head.ref
            return
        n=self.head
        while n.ref is not None:
            if n.ref.data == x:
                break
            n = n.ref
        if n.ref is None:
            print("Link List is empty, Can't do deletion operationfor any nodes")
        else:
            n.ref=n.ref.ref
LL1=LinkedList()
LL1.add_begining(10)
LL1.add_begining(20)
LL1.add_at_end(30)
LL1.add_at_end(35)
LL1.add_after_node(40,30)
LL1.add_before_first_node(50,20)
LL1.add_before_last_node(60,35)
#LL1.deleting_first_node()
#LL1.deleting_last_node()
LL1.deleting_any_node_by_value(30)
LL1.printLL()

O/p: 50 --> 20 --> 10 --> 40 --> 60 --> 35 -->
