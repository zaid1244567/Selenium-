import pytest
"""
pytest:
*******
"""
"""
pytest:
*******
*pytest is a unit-testing framework basically developer will be used.
*pytest will be used by QA for following reason,
    *to run test function/method automatically.
    *to run multiple testcase at oneshot.
    *to generate reports.
    *to achieve parallel execution(compatibility).

steps to install pytest:
************************
click on file-->click on settings-->click on project-->click python interpreter-->click on plus icon
-->search for pytest-->click on specify version(latest version)-->click on install package.

naming convensition for pytest:
*******************************
*function/method name should be starts with test keyword(test_*).
*class name should starts with Test keyword and 1st letter should be capital(Test_*) and pytest class should
not consist of constructor(__init__).
*module name can starts with test (or) end with test keyword(test_* (or) *_test).

how to run pytest function/class:
*********************************
*copy the path where pytest function/file is present(right click on folder-->click on copy path-->click on absolute path)
*open cmd --> change directory by below command
    >>cd path_of_pytest_file
    >>pytest -vs pytest_filename.py

v->verbosity
s->scripting    
*vs is used to get the output/message in detailed format.

note:
-----
*a function which starts with test keyword is called as test function/method
*a class which starts with test keyword is called as test class.
*a module start/end with test keyword is called as test module.
"""
#function calling
"""
def compose_tc():
    print("compose testcase")
def inbox_tc():
    print("inbox testcase")
# compose_tc()            #compose testcase
# inbox_tc()              #inbox testcase
"""

#method calling
"""
class Gmail:
    def spam_tc(self):
        print("spam testcase")
# g = Gmail()
# g.spam_tc()             #spam testcase
"""
"""
*according to above examples function/method will execute only when ever it is called or invoke.
*we want a concept a function/method should get execute automatically(implicitly) then go "pytest".
"""
##############################################################################################################
#function level
#test function
"""
def testcompose():
    print("composing a mail")
"""
"""
>pytest -vs pyconcept.py
collected 1 item

pyconcept.py::testcompose composing a mail
PASSED
"""
#non-test function
"""
def compose_test():
    print("compose test case")
"""
"""
>pytest -vs pyconcept.py
collected 0 items
"""
#multiple test function
"""
def test_login():
    print("login testcase")
def test_signup():
    print("signup testcase")
def test_register():
    print("register testcase")
"""
"""
>pytest -vs pyconcept.py
collected 3 items

pyconcept.py::test_login login testcase
PASSED
pyconcept.py::test_signup signup testcase
PASSED
pyconcept.py::test_register register testcase
PASSED
"""

#combination of test and normal function
"""
def test_login():
    print("login testcase")
def signup():
    print("signup testcase")
def test_register():
    print("register testcase")
"""
"""
>pytest -vs pyconcept.py
collected 2 items

pyconcept.py::test_login login testcase
PASSED
pyconcept.py::test_register register testcase
PASSED
"""

#normal/non test function
"""
def login():
    print("login testcase")
def signup():
    print("signup testcase")
def register():
    print("register testcase")
"""
"""
>pytest -vs pyconcept.py
collected 0 items
"""
###########################################################################################################
#class and method level
#testclass and test method
"""
class Test_Gmail:
    def test_TC1(self):
        print("Testcase1")
    def test_TC2(self):
        print("testcase2")
"""
"""
>pytest -vs pyconcept.py
collected 2 items

pyconcept.py::Test_Gmail::test_TC1 Testcase1
PASSED
pyconcept.py::Test_Gmail::test_TC2 testcase2
PASSED
"""

#normal class and test method
"""
class Gmail:
    def test_TC1(self):
        print("Testcase1")
    def test_TC2(self):
        print("testcase2")
"""
"""
>pytest -vs pyconcept.py
collected 0 items
"""

#test class with normal and test method
"""
class TestGmail:
    def TC1(self):
        print("Testcase1")
    def test_TC2(self):
        print("testcase2")
"""
"""
>pytest -vs pyconcept.py
collected 1 item

pyconcept.py::TestGmail::test_TC2 testcase2
PASSED
"""

#test class with normal method
"""
class TestGmail:
    def TC1(self):
        print("Testcase1")
    def TC2(self):
        print("testcase2")
"""
"""
>pytest -vs pyconcept.py
collected 0 items
"""

#test class with normal and test method and constructor
"""
class Test_FB:
    def __init__(self):
        print("in a constructor")
    def test_login(self):
        print("login page")
"""
"""
>pytest -vs pyconcept.py
collected 0 items
PytestCollectionWarning: cannot collect test class 'Test_FB' because it has a __init__ constructor (from: pyconcept.py)
"""
#the above we are gerring error because a class consist of constructor, constructor will get execute
#only when we create a object, but test class is impicitly callable we no need to create an object.

#multiple test class with test method
"""
class Test_Fb:
    def test_tc1(self):
        print("fb testcase1")

class Test_Gmail:
    def test_tc2(self):
        print("gmail testcase")
"""
"""
>pytest -vs pyconcept.py
collected 2 items

pyconcept.py::Test_Fb::test_tc1 fb testcase1
PASSED
pyconcept.py::Test_Gmail::test_tc2 gmail testcase
PASSED
"""

#multiple test class with test method and normal method
"""
class Test_Fb:
    def test_tc1(self):
        print("fb testcase1")

class Test_Gmail:
    def tc2(self):
        print("gmail testcase")
    def test_tc3(self):
        print("gmail testcase3")
"""
"""
>pytest -vs pyconcept.py
collected 2 items

pyconcept.py::Test_Fb::test_tc1 fb testcase1
PASSED
pyconcept.py::Test_Gmail::test_tc3 gmail testcase3
PASSED
"""

#multiple class with test method
"""
class Fb:
    def test_tc1(self):
        print("fb testcase1")

class Gmail:
    def test_tc2(self):
        print("gmail testcase")
    def test_tc3(self):
        print("gmail testcase3")
"""
"""
>pytest -vs pyconcept.py
collected 0 items
"""
